grammar edu.upb.lp.isc.Pipo with org.eclipse.xtext.common.Terminals

generate pipo "http://www.upb.edu/lp/isc/Pipo"

Program:
	"#lang" "racket"
	(elements+=AbstractElement)+;

AbstractElement:
	Expression | DataType | Define;

@Override
terminal SL_COMMENT:
	';' !('\n' | '\r')* ('\r'? '\n')?;

General:
	Expression | SimpleValuesReturn | DataType;

Expression:
	(Conditional | Function);

Function:
	FunctionCall | ListFunction | BooleanFunction | StringFunction | IntFunction | GeneralFunction;

ValuesReturnList:
	SimpleValuesReturn | Conditional | ListFunctionList | List | ListFunctionSomething | FunctionCall;

ValuesReturnInt:
	SimpleValuesReturn | Conditional | IntValueReturn | IntFunctionInt | ListFunctionInt | StringFunctionInt |
	FunctionCall | ListFunctionSomething;

ValuesReturnBoolean:
	SimpleValuesReturn | BooleanFunction | IntFunctionBoolean | ListFunctionBoolean | FunctionCall |
	ListFunctionSomething | StringFunctionBoolean| GeneralFunction | Conditional;

ValuesReturnString:
	SimpleValuesReturn | StringFunctionString | StringValueReturn | FunctionCall | Conditional | ListFunctionSomething;

GeneralFunction:
	StringQ | IntegerQ | BooleanQ | ListQ ;


StringQ:
	'(' 'string?' string=(General) ')';

IntegerQ:
	'(' 'integer?' int=(General) ')';

BooleanQ:
	'(' 'boolean?' string=(General) ')';

ListQ:
	'(' 'list?' string=(General) ')';

ListFunction:
	ListFunctionBoolean | ListFunctionInt | ListFunctionSomething | ListFunctionList;

ListFunctionBoolean:
	'(' 'null?' list=ValuesReturnList ')';

ListFunctionInt:
	Length | IndexOF;

Length:
	'(' 'length' list1=ValuesReturnList ')';

IndexOF:
	'(' 'index-of' list=ValuesReturnList value=ValuesReturnInt ')';

ListFunctionSomething:
	ListRef | Last | First;

ListRef:
	'(' 'list-ref' list=ValuesReturnList value=ValuesReturnInt ')';

Last:
	'(' 'last' list1=ValuesReturnList ')';

First:
	'(' 'first' list2=ValuesReturnList ')';

ListFunctionList:
	Append | Reverse | Remove | ListTail;

ListTail:
	'(' 'list-tail' list=ValuesReturnList value=ValuesReturnInt ')';

Append:
	'(' 'append' list1=ValuesReturnList list2=ValuesReturnList ')';

Reverse:
	'(' 'reverse' list=ValuesReturnList ')';

Remove:
	'(' 'remove' value=ValuesReturnInt  list=ValuesReturnList ')';

IntFunction:
	IntFunctionInt | IntFunctionBoolean;

IntFunctionBoolean:
	Equal | Greater | Less | GreaterOrEqual | LessOrEqual;

Equal:
	'(' '=' bool1=ValuesReturnInt bool2=ValuesReturnInt ')';

Greater:
	'(' '>' bool1=ValuesReturnInt bool2=ValuesReturnInt ')';

Less:
	'(' '<' bool1=ValuesReturnInt bool2=ValuesReturnInt ')';

GreaterOrEqual:
	'(' '>=' bool1=ValuesReturnInt bool2=ValuesReturnInt ')';

LessOrEqual:
	'(' '<=' bool1=ValuesReturnInt bool2=ValuesReturnInt ')';

IntFunctionInt:
	Plus | Minus | Quotient | Product | Remainder | Gcd | Lcm | Abs | IntegerSqrt | Expt;

Plus:
	'(' '+' value1=ValuesReturnInt value2+=ValuesReturnInt+ ')';

Minus:
	'(' '-' value1=ValuesReturnInt value2+=ValuesReturnInt+ ')';

Quotient:
	'(' 'quotient' value1=ValuesReturnInt value2=ValuesReturnInt ')';

Product:
	'(' '*' value1=ValuesReturnInt value2+=ValuesReturnInt+ ')';

Remainder:
	'(' 'remainder' value1=ValuesReturnInt value2=ValuesReturnInt ')';

Gcd:
	'(' 'gcd' value1+=ValuesReturnInt+ ')';

Lcm:
	'(' 'lcm' value1+=ValuesReturnInt+ ')';

Abs:
	'(' 'abs' value1=ValuesReturnInt ')';

IntegerSqrt:
	'(' 'integer-sqrt' value1=ValuesReturnInt ')';

Expt:
	'(' 'expt' value1=ValuesReturnInt value2=ValuesReturnInt ')';

BooleanFunction:
	Not | And | Or | Nand | Nor;

Nor:
	'(' 'nor' argumentsNor+=ValuesReturnBoolean+ ')';

Nand:
	'(' 'nand' argumentsNand+=ValuesReturnBoolean+ ')';

Or:
	'(' 'or' argumentsOr+=ValuesReturnBoolean+ ')';

And:
	'(' 'and' argumentsAnd+=ValuesReturnBoolean+ ')';

Not:
	'(' 'not' toDeny=ValuesReturnBoolean ')';

StringFunction:
	StringFunctionInt | StringFunctionString | StringFunctionBoolean;

StringFunctionString:
	StringRef | StringSet | SubString | StringAppend | StringUpCase | StringDownCase | StringTitlecase;

StringRef:
	'(' 'string-ref' stringRef=(ValuesReturnString) ref=(ValuesReturnInt) ')';

StringSet:
	'(' 'string-set!' stringSet=(ValuesReturnString) position=ValuesReturnInt char=(ValuesReturnString) ')';

SubString:
	'(' 'substring' CompleteString=(ValuesReturnString) from=ValuesReturnInt (to=ValuesReturnInt)? ')';

StringAppend:
	'(' 'string-append' toAppend=(ValuesReturnString) toAppend2+=(ValuesReturnString)+')';

StringUpCase:
	'(' 'string-upcase' toUp=ValuesReturnString ')';

StringDownCase:
	'(' 'string-downcase' toDown=ValuesReturnString ')';

StringTitlecase:
	'(' 'string-titlecase' title=ValuesReturnString ')';

StringFunctionInt:
	'(' 'string-length' length=(ValuesReturnString) ')';

StringFunctionBoolean:
	StringEq | StringCi | StringContains | StringPrefix | StringSuffix | NonEmptyString;

StringEq:
	'(' 'string=?' (toCompare=ValuesReturnString) toCompare2=ValuesReturnString ')';

StringCi:
	'(' 'string-ci=?' (toCompare=ValuesReturnString) toCompare2=ValuesReturnString')';

StringContains:
	'(' 'string-contains?' container=ValuesReturnString toFound=ValuesReturnString ')';

StringPrefix:
	'(' 'string-prefix?' word=ValuesReturnString head=ValuesReturnString ')';

StringSuffix:
	'(' 'string-suffix?' word=ValuesReturnString tail=ValuesReturnString ')';

NonEmptyString:
	'(' 'non-empty-string?' noEmpty=General ')';

FunctionCall:
	'(' (method=[Define]) parameters+=General* ')';

Define:
	DefineV | DefineF;

DefineF:
	'(' 'define' '(' name=ID parameter+=(ID)+ ')' body+=General+ ')';

DefineV:
	'(' 'define' name=ID value=General ')';

Conditional:
	(If | Cond);

Cond:
	"(" 'cond' ('[' pos+=(ValuesReturnBoolean) result+=(General)? ']')+ ('[' 'else' elseResult=(General) ']')? ")";

If:
	"(" 'if' if=ValuesReturnBoolean pos1=(General) pos2=(General) ")";

DataType:
	IntValueReturn | StringValueReturn | BooleanValueReturn | List;

List:
	'(' 'list' (elements+=General)+ ')' | null?='null';

SimpleValuesReturn:
	id=ID;

IntValueReturn:
	int=INT;

StringValueReturn:
	string=STRING;

BooleanValueReturn:
	boolean=BOOLEAN;

terminal BOOLEAN:
	('#f' | '#F') | ('#t' | '#T');

@Override
terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '-' | '?')*;